session:
cookie与session的区别是， cookie数据保存在客户端，session数据保存在服务器端。简单的说，当你登录一个网站的时候，如果web服务器端使用的是session,那么所有的数据都保存在服务器上面，客户端每次请求服务器的时候会发送当前会话的sessionid，服务器根据当前sessionid判断相应的用户数据标志，以确定用户是否登录，或具有某种权限。由于数据是存储在服务器上面，所以你不能伪造，但是如果你能够获取某个登录用户的sessionid，用特殊的浏览器伪造该用户的请求也是能够成功的。

token:
session是基于cookie的,而cookie是基于浏览器行为的，

基于 Token 的身份验证

使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：
1.客户端使用用户名跟密码请求登录
2.服务端收到请求，去验证用户名与密码
3.验证成功后，服务端会签发一个 Token，再把这个 Token 返回给客户端
4.客户端拿到 Token 以后可以把它存储起来，比如放在 Cookie ,Headers，请求参数
5.客户端每次向服务端请求资源的时候需要带着服务端签发的 Token服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据

session和token最本质的差异性是什么？
1.登录成功后，拿到session的信息 可以再次发送请求,服务端能够经过验证




基本身份验证是一种流行的、行业标准的身份验证方案,
在 HTTP 1.0 中指定的。此方法使用用户 ID 和密码
由用户提交以获得身份验证。提交的用户 ID 和密码
使用 Base64 编码标准进行编码, 并通过 HTTP 传输。的
只有当用户 ID 和密码有效时, 服务器才允许访问用户。的
以下是使用基本身份验证的优点:
基本身份验证流包含两个步骤:
1. 如果请求的资源需要身份验证, 服务器将返回 http 401
包含 WWW 身份验证标头的响应。
2. 如果用户以用户 ID 和密码发送另一个请求, 则在
授权头, 服务器处理提交的凭据
并提供了访问权限。


摘要式身份验证:
摘要身份验证是众所周知的 HTTP 身份验证方案之一,它是为了克服基本身份验证的大多数缺点而引入的。
这种类型的身份验证使用用户 ID 和密码就像基本身份验证, 但主要的区别在于图片中, 当凭据转到服务
器。摘要身份验证通过额外的里程增加了凭据的安全性使用加密加密的概念。当用户提交密码时为了进行
身份验证, 浏览器将对其应用 MD5 哈希方案。过程的关键在于使用正则值 (伪随机数), 而加密可减少重播攻击的密码。


OAuth 认证
OAuth 是一个开放的标准授权协议, 它允许客户端应用程序
对第三方服务 (如 Google) 的用户帐户进行安全委派访问,
Twitter, GitHub 等等。在本主题中, 我们将介绍两个版本:-
OAuth 1.0 和 OAuth 2.0。见案例的代码：

session
token
认证